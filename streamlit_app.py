import streamlit as st
import pandas as pd
import datetime

st.set_page_config(page_title="Revisi√≥n de Desv√≠os", page_icon="üöç", layout="wide")

st.title("üìä Revisi√≥n de Desv√≠os Activos e Inactivos")
st.markdown("Sube el archivo Excel con los datos de desv√≠os para generar el informe consolidado.")

archivo = st.file_uploader("üìÅ Cargar archivo Excel", type=["xlsx"])

if archivo is not None:
    df = pd.read_excel(archivo)

    # Convertir Hora Instante a datetime
    df["Hora Instante"] = pd.to_datetime(df["Hora Instante"], errors="coerce")
    df["Hora Instante"] = df["Hora Instante"].dt.time

    # Extraer Fecha
    df["Fecha Instante"] = pd.to_datetime(df["Fecha Instante"], errors="coerce").dt.date

    # Determinar el estado m√°s reciente por C√≥digo Desv√≠o
    df_sorted = df.sort_values(by=["C√≥digo de Desv√≠o", "Hora Instante"], ascending=[True, False])
    df_sorted["Estado Reciente"] = df_sorted.groupby("C√≥digo de Desv√≠o")["Estado"].transform("first")

    # Clasificaci√≥n final
    def definir_estado_final(grupo):
        estados = grupo["Estado"].unique()
        if len(estados) > 1:
            return "Modificado"
        else:
            return estados[0]

    df_estado = df.groupby("C√≥digo de Desv√≠o").apply(definir_estado_final).reset_index(name="Estado Final")

    # Revisi√≥n (uno por c√≥digo con estado m√°s reciente)
    df_revision = df_sorted.drop_duplicates(subset=["C√≥digo de Desv√≠o"], keep="first")
    df_revision["Revisi√≥n"] = df_revision["Estado Reciente"].replace({"Activo": "Revisar", "Inactivo": "No Revisar"})

    # Contar repeticiones
    df_conteo = df["C√≥digo de Desv√≠o"].value_counts().reset_index()
    df_conteo.columns = ["C√≥digo de Desv√≠o", "Cantidad"]

    # Unir todo
    final = df_sorted.merge(df_estado, on="C√≥digo de Desv√≠o", how="left")
    final = final.merge(df_conteo, on="C√≥digo de Desv√≠o", how="left")
    final = final.merge(df_revision[["C√≥digo de Desv√≠o", "Revisi√≥n"]], on="C√≥digo de Desv√≠o", how="left")

    # Reordenar columnas
    columnas_orden = ["Fecha Instante", "Hora Instante", "Nombre del Usuario", "C√≥digo de Desv√≠o",
                      "Estado", "Estado Final", "Cantidad", "Revisi√≥n"]
    columnas_existentes = [col for col in columnas_orden if col in final.columns]
    columnas_restantes = [col for col in final.columns if col not in columnas_existentes]
    final = final[columnas_existentes + columnas_restantes]

    # Mostrar tabla
    st.success("‚úÖ Archivo procesado correctamente.")
    st.dataframe(final, use_container_width=True)

    # Descargar
    nombre = f"Revision de desvios {datetime.datetime.now().date()}.xlsx"
    final_excel = final.copy()
    final_excel.to_excel(nombre, index=False)

    with open(nombre, "rb") as f:
        st.download_button(
            label="üì• Descargar archivo procesado",
            data=f,
            file_name=nombre,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
 
