# streamlit_app.py

import streamlit as st
import pandas as pd
import re
from datetime import datetime, date
from pytz import timezone
from io import BytesIO
import plotly.express as px
import smtplib
from email.message import EmailMessage

st.set_page_config(page_title="Revisi√≥n de Desv√≠os", page_icon="üöç", layout="wide")
st.title("üöç Revisi√≥n de Desv√≠os Operativos")

st.markdown("Sube el archivo **de desv√≠os (acciones)** y la **base PMT**. El sistema detecta el formato y ajusta encabezados autom√°ticamente.")

col1, col2 = st.columns(2)
with col1:
    f_desv = st.file_uploader("üìÇ Archivo de Desv√≠os (acciones .xlsx)", type=["xlsx"], key="desv")
with col2:
    f_pmt = st.file_uploader("üìÇ Base PMT (.xlsx)", type=["xlsx"], key="pmt")

if not f_desv:
    st.info("üëà Sube al menos el **archivo de desv√≠os** para comenzar.")
    st.stop()

def leer_desvios(file):
    try_orders = [{"skiprows": 1}, {"skiprows": 0}]
    raw = None
    for opts in try_orders:
        try:
            raw = pd.read_excel(file, engine="openpyxl", **opts)
            break
        except:
            continue

    if raw.shape[1] in (16, 17):
        cols16 = ['Fecha', 'Instante', 'L√≠nea', 'Coche', 'C√≥digo Bus', 'N¬∫ SAE Bus', 'Acci√≥n', 'Descripci√≥n Acci√≥n', 'Usuario', 'Nombre Usuario', 'Puesto', 'Par√°metros', 'Motivo', 'Descripci√≥n Motivo', 'Otra Columna', 'RUTA']
        cols17 = cols16 + ['ZONA']
        raw.columns = cols16 if raw.shape[1] == 16 else cols17
        if raw.shape[1] == 16:
            raw["ZONA"] = ""
    return raw

try:
    df_raw = leer_desvios(f_desv)
except Exception as e:
    st.error("Error al leer archivo de desv√≠os")
    st.exception(e)
    st.stop()

if "Descripci√≥n Acci√≥n" in df_raw.columns:
    df = df_raw[df_raw["Descripci√≥n Acci√≥n"].astype(str).str.strip().str.lower() == "desvio"].copy()
else:
    df = df_raw.copy()

df["Ruta"] = df.get("RUTA", "")
df["Zona"] = df.get("ZONA", "")

df["Estado Desv√≠o"] = df["Par√°metros"].apply(
    lambda x: "Activo" if isinstance(x, str) and any(k in x for k in ['Activar="SI"', 'Activo="SI"', 'ACTIVAR="SI"', 'ACTIVO="SI"']) else "Inactivo"
)

def extraer_codigo(param):
    if isinstance(param, str):
        m = re.search(r'Desvio="(\d+)"', param)
        if m:
            return m.group(1)
    return None

df["C√≥digo Desv√≠o"] = df["Par√°metros"].apply(extraer_codigo)

df["Instante"] = pd.to_datetime(df["Fecha"].astype(str) + " " + df["Instante"].astype(str), errors="coerce")
df["Fecha Instante"] = df["Instante"].dt.date
df["Hora Instante"] = df["Instante"].dt.strftime("%H:%M:%S")

# Agrupar por C√≥digo Desv√≠o
estado_final = df.groupby("C√≥digo Desv√≠o", group_keys=False).apply(
    lambda g: g.sort_values("Instante", ascending=False).iloc[0]["Estado Desv√≠o"]
    if len(g) == 2 else (
        "Modificado" if ("Activo" in g["Estado Desv√≠o"].values and "Inactivo" in g["Estado Desv√≠o"].values)
        else g.iloc[0]["Estado Desv√≠o"]
    )
)
estado_final = estado_final.reset_index(name="Estado Final")

conteo = df["C√≥digo Desv√≠o"].value_counts().reset_index().rename(columns={"index": "C√≥digo Desv√≠o", "C√≥digo Desv√≠o": "Cantidad"})
df_final = pd.merge(df, estado_final, on="C√≥digo Desv√≠o", how="left")
df_final = pd.merge(df_final, conteo, on="C√≥digo Desv√≠o", how="left")

estado_mas_reciente = df_final.groupby("C√≥digo Desv√≠o").apply(
    lambda g: g.sort_values("Instante", ascending=False).iloc[0]["Estado Desv√≠o"]
).reset_index(name="Estados")
df_final = pd.merge(df_final, estado_mas_reciente, on="C√≥digo Desv√≠o", how="left")
df_final["Revisi√≥n"] = df_final["Estados"].replace({"Activo": "Revisar", "Inactivo": "No Revisar"})

df_final["Duraci√≥n Activo"] = df_final["Instante"].apply(
    lambda x: datetime.now(timezone("America/Bogota")).replace(tzinfo=None) - x if pd.notnull(x) else pd.NaT
)
df_final["Duraci√≥n Activo"] = df_final["Duraci√≥n Activo"].apply(
    lambda td: f"{td.seconds // 3600} horas {((td.seconds % 3600) // 60)} minutos" if pd.notnull(td) else ""
)

if f_pmt:
    try:
        pmt_df = pd.read_excel(f_pmt, engine="openpyxl")
        pmt_ids = pmt_df["ID"].astype(str).str.strip().tolist() if "ID" in pmt_df.columns else []
        df_final["Pmt o Desv√≠os Nuevos"] = df_final["C√≥digo Desv√≠o"].apply(lambda x: "PMT" if str(x) in pmt_ids else "Desv√≠o Nuevo")
    except:
        df_final["Pmt o Desv√≠os Nuevos"] = "Desv√≠o Nuevo"
else:
    df_final["Pmt o Desv√≠os Nuevos"] = "Desv√≠o Nuevo"

cols_finales = [
    "Fecha Instante", "Hora Instante", "Nombre Usuario", "C√≥digo Desv√≠o", "Estado Desv√≠o",
    "Estado Final", "Cantidad", "Ruta", "Zona", "Pmt o Desv√≠os Nuevos", "Estados", "Revisi√≥n", "Duraci√≥n Activo"
]
df_final = df_final[[c for c in cols_finales if c in df_final.columns]]

with st.expander("üîé Filtros"):
    rutas = df_final["Ruta"].unique().tolist()
    zonas = df_final["Zona"].unique().tolist()
    estados = df_final["Estado Final"].unique().tolist()

    sel_ruta = st.multiselect("Filtrar por Ruta", rutas, default=rutas)
    sel_zona = st.multiselect("Filtrar por Zona", zonas, default=zonas)
    sel_estado = st.multiselect("Filtrar por Estado Final", estados, default=estados)

    df_final = df_final[
        df_final["Ruta"].isin(sel_ruta) &
        df_final["Zona"].isin(sel_zona) &
        df_final["Estado Final"].isin(sel_estado)
    ]

st.success("‚úÖ Procesado con √©xito. Vista previa:")
st.dataframe(df_final, use_container_width=True)

# Gr√°ficas
col1, col2 = st.columns(2)
with col1:
    fig1 = px.pie(df_final, names="Estado Final", title="Distribuci√≥n de Estado Final")
    st.plotly_chart(fig1, use_container_width=True)
with col2:
    fig2 = px.bar(df_final["Revisi√≥n"].value_counts().reset_index(),
                  x="index", y="Revisi√≥n", title="Revisi√≥n por Estado")
    st.plotly_chart(fig2, use_container_width=True)

# Descargar Excel
buffer = BytesIO()
df_final.to_excel(buffer, index=False)
buffer.seek(0)
st.download_button(
    "üì• Descargar Excel final",
    data=buffer,
    file_name=f"Revision de desvios {date.today().strftime('%Y-%m-%d')}.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

# Enviar por correo
with st.expander("üìß Enviar por correo"):
    correo = st.text_input("Correo destino")
    if st.button("Enviar reporte"):
        if correo:
            msg = EmailMessage()
            msg['Subject'] = 'Reporte de Desv√≠os Operativos'
            msg['From'] = st.secrets["HOTMAIL_USER"]
            msg['To'] = correo
            msg.set_content("Adjunto encontrar√° el reporte generado desde la aplicaci√≥n Streamlit.")
            msg.add_attachment(buffer.getvalue(), maintype='application',
                               subtype='vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                               filename="Reporte_Desvios.xlsx")
            try:
                with smtplib.SMTP('smtp.office365.com', 587) as smtp:
                    smtp.starttls()
                    smtp.login(st.secrets["HOTMAIL_USER"], st.secrets["HOTMAIL_PASS"])
                    smtp.send_message(msg)
                st.success("üì® Correo enviado con √©xito")
            except Exception as e:
                st.error("Error al enviar correo")
                st.exception(e)
        else:
            st.warning("Debe ingresar un correo v√°lido")

